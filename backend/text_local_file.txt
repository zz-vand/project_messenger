{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'a'"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"a\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<sqlalchemy.engine.cursor.CursorResult object at 0x7f90f9160980>\n"
     ]
    }
   ],
   "source": [
    "from sqlalchemy.ext.asyncio import async_sessionmaker, create_async_engine, AsyncSession\n",
    "from sqlalchemy import create_engine\n",
    "from sqlalchemy.sql import text\n",
    "\n",
    "DB_HOST = \"localhost\"\n",
    "DB_PORT = \"5432\"\n",
    "DB_NAME = \"budget_lists\"\n",
    "DB_USER =\"postgres\"\n",
    "DB_PASSWORD = \"postgres\"\n",
    "\n",
    "\n",
    "DATABASE_URL=f\"postgresql+asyncpg://{DB_USER}:{DB_PASSWORD}@{DB_HOST}:{DB_PORT}/{DB_NAME}\" \n",
    "engine=None\n",
    "\n",
    "engine = create_async_engine(url=DATABASE_URL)\n",
    "sessionmaker = async_sessionmaker(bind=engine, expire_on_commit=False)\n",
    "async with sessionmaker() as session:\n",
    "    a = await session.execute(text('SELECT * FROM meow'))\n",
    "    print(a)\n",
    " "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<sqlalchemy.ext.asyncio.engine.AsyncConnection object at 0x7f90fa7c27b0>\n"
     ]
    }
   ],
   "source": [
    "async with engine.connect() as conection:\n",
    "    print(conection)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "ename": "MissingGreenlet",
     "evalue": "greenlet_spawn has not been called; can't call await_only() here. Was IO attempted in an unexpected place? (Background on this error at: https://sqlalche.me/e/20/xd2s)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mMissingGreenlet\u001b[0m                           Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[57], line 16\u001b[0m\n\u001b[1;32m     13\u001b[0m Base \u001b[38;5;241m=\u001b[39m declarative_base()\n\u001b[1;32m     14\u001b[0m engine \u001b[38;5;241m=\u001b[39m create_engine(url\u001b[38;5;241m=\u001b[39mDATABASE_URL)\n\u001b[0;32m---> 16\u001b[0m \u001b[38;5;28;01masync\u001b[39;00m \u001b[38;5;28;01mwith\u001b[39;00m \u001b[43mengine\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mconnect\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m \u001b[38;5;28;01mas\u001b[39;00m conection:\n\u001b[1;32m     17\u001b[0m     \u001b[38;5;28mprint\u001b[39m(conection)\n\u001b[1;32m     19\u001b[0m \u001b[38;5;28;01mclass\u001b[39;00m \u001b[38;5;21;01mUser\u001b[39;00m(Base):\n",
      "File \u001b[0;32m~/misis/itam/messenger_proj_beckend/itam_messenger_env/lib/python3.12/site-packages/sqlalchemy/engine/base.py:3278\u001b[0m, in \u001b[0;36mEngine.connect\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   3255\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mconnect\u001b[39m(\u001b[38;5;28mself\u001b[39m) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m Connection:\n\u001b[1;32m   3256\u001b[0m \u001b[38;5;250m    \u001b[39m\u001b[38;5;124;03m\"\"\"Return a new :class:`_engine.Connection` object.\u001b[39;00m\n\u001b[1;32m   3257\u001b[0m \n\u001b[1;32m   3258\u001b[0m \u001b[38;5;124;03m    The :class:`_engine.Connection` acts as a Python context manager, so\u001b[39;00m\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m   3275\u001b[0m \n\u001b[1;32m   3276\u001b[0m \u001b[38;5;124;03m    \"\"\"\u001b[39;00m\n\u001b[0;32m-> 3278\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_connection_cls\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m)\u001b[49m\n",
      "File \u001b[0;32m~/misis/itam/messenger_proj_beckend/itam_messenger_env/lib/python3.12/site-packages/sqlalchemy/engine/base.py:146\u001b[0m, in \u001b[0;36mConnection.__init__\u001b[0;34m(self, engine, connection, _has_events, _allow_revalidate, _allow_autobegin)\u001b[0m\n\u001b[1;32m    144\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m connection \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m    145\u001b[0m     \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m--> 146\u001b[0m         \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_dbapi_connection \u001b[38;5;241m=\u001b[39m \u001b[43mengine\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mraw_connection\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    147\u001b[0m     \u001b[38;5;28;01mexcept\u001b[39;00m dialect\u001b[38;5;241m.\u001b[39mloaded_dbapi\u001b[38;5;241m.\u001b[39mError \u001b[38;5;28;01mas\u001b[39;00m err:\n\u001b[1;32m    148\u001b[0m         Connection\u001b[38;5;241m.\u001b[39m_handle_dbapi_exception_noconnection(\n\u001b[1;32m    149\u001b[0m             err, dialect, engine\n\u001b[1;32m    150\u001b[0m         )\n",
      "File \u001b[0;32m~/misis/itam/messenger_proj_beckend/itam_messenger_env/lib/python3.12/site-packages/sqlalchemy/engine/base.py:3302\u001b[0m, in \u001b[0;36mEngine.raw_connection\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   3280\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mraw_connection\u001b[39m(\u001b[38;5;28mself\u001b[39m) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m PoolProxiedConnection:\n\u001b[1;32m   3281\u001b[0m \u001b[38;5;250m    \u001b[39m\u001b[38;5;124;03m\"\"\"Return a \"raw\" DBAPI connection from the connection pool.\u001b[39;00m\n\u001b[1;32m   3282\u001b[0m \n\u001b[1;32m   3283\u001b[0m \u001b[38;5;124;03m    The returned object is a proxied version of the DBAPI\u001b[39;00m\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m   3300\u001b[0m \n\u001b[1;32m   3301\u001b[0m \u001b[38;5;124;03m    \"\"\"\u001b[39;00m\n\u001b[0;32m-> 3302\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mpool\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mconnect\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n",
      "File \u001b[0;32m~/misis/itam/messenger_proj_beckend/itam_messenger_env/lib/python3.12/site-packages/sqlalchemy/pool/base.py:449\u001b[0m, in \u001b[0;36mPool.connect\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    441\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mconnect\u001b[39m(\u001b[38;5;28mself\u001b[39m) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m PoolProxiedConnection:\n\u001b[1;32m    442\u001b[0m \u001b[38;5;250m    \u001b[39m\u001b[38;5;124;03m\"\"\"Return a DBAPI connection from the pool.\u001b[39;00m\n\u001b[1;32m    443\u001b[0m \n\u001b[1;32m    444\u001b[0m \u001b[38;5;124;03m    The connection is instrumented such that when its\u001b[39;00m\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    447\u001b[0m \n\u001b[1;32m    448\u001b[0m \u001b[38;5;124;03m    \"\"\"\u001b[39;00m\n\u001b[0;32m--> 449\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43m_ConnectionFairy\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_checkout\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m)\u001b[49m\n",
      "File \u001b[0;32m~/misis/itam/messenger_proj_beckend/itam_messenger_env/lib/python3.12/site-packages/sqlalchemy/pool/base.py:1263\u001b[0m, in \u001b[0;36m_ConnectionFairy._checkout\u001b[0;34m(cls, pool, threadconns, fairy)\u001b[0m\n\u001b[1;32m   1255\u001b[0m \u001b[38;5;129m@classmethod\u001b[39m\n\u001b[1;32m   1256\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m_checkout\u001b[39m(\n\u001b[1;32m   1257\u001b[0m     \u001b[38;5;28mcls\u001b[39m,\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m   1260\u001b[0m     fairy: Optional[_ConnectionFairy] \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m,\n\u001b[1;32m   1261\u001b[0m ) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m _ConnectionFairy:\n\u001b[1;32m   1262\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m fairy:\n\u001b[0;32m-> 1263\u001b[0m         fairy \u001b[38;5;241m=\u001b[39m \u001b[43m_ConnectionRecord\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mcheckout\u001b[49m\u001b[43m(\u001b[49m\u001b[43mpool\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   1265\u001b[0m         \u001b[38;5;28;01mif\u001b[39;00m threadconns \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m   1266\u001b[0m             threadconns\u001b[38;5;241m.\u001b[39mcurrent \u001b[38;5;241m=\u001b[39m weakref\u001b[38;5;241m.\u001b[39mref(fairy)\n",
      "File \u001b[0;32m~/misis/itam/messenger_proj_beckend/itam_messenger_env/lib/python3.12/site-packages/sqlalchemy/pool/base.py:712\u001b[0m, in \u001b[0;36m_ConnectionRecord.checkout\u001b[0;34m(cls, pool)\u001b[0m\n\u001b[1;32m    710\u001b[0m     rec \u001b[38;5;241m=\u001b[39m cast(_ConnectionRecord, pool\u001b[38;5;241m.\u001b[39m_do_get())\n\u001b[1;32m    711\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m--> 712\u001b[0m     rec \u001b[38;5;241m=\u001b[39m \u001b[43mpool\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_do_get\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    714\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[1;32m    715\u001b[0m     dbapi_connection \u001b[38;5;241m=\u001b[39m rec\u001b[38;5;241m.\u001b[39mget_connection()\n",
      "File \u001b[0;32m~/misis/itam/messenger_proj_beckend/itam_messenger_env/lib/python3.12/site-packages/sqlalchemy/pool/impl.py:179\u001b[0m, in \u001b[0;36mQueuePool._do_get\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    177\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_create_connection()\n\u001b[1;32m    178\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m:\n\u001b[0;32m--> 179\u001b[0m \u001b[43m    \u001b[49m\u001b[38;5;28;43;01mwith\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[43mutil\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43msafe_reraise\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\u001b[43m:\u001b[49m\n\u001b[1;32m    180\u001b[0m \u001b[43m        \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_dec_overflow\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    181\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m\n",
      "File \u001b[0;32m~/misis/itam/messenger_proj_beckend/itam_messenger_env/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:146\u001b[0m, in \u001b[0;36msafe_reraise.__exit__\u001b[0;34m(self, type_, value, traceback)\u001b[0m\n\u001b[1;32m    144\u001b[0m     \u001b[38;5;28;01massert\u001b[39;00m exc_value \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m\n\u001b[1;32m    145\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_exc_info \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m  \u001b[38;5;66;03m# remove potential circular references\u001b[39;00m\n\u001b[0;32m--> 146\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m exc_value\u001b[38;5;241m.\u001b[39mwith_traceback(exc_tb)\n\u001b[1;32m    147\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m    148\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_exc_info \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m  \u001b[38;5;66;03m# remove potential circular references\u001b[39;00m\n",
      "File \u001b[0;32m~/misis/itam/messenger_proj_beckend/itam_messenger_env/lib/python3.12/site-packages/sqlalchemy/pool/impl.py:177\u001b[0m, in \u001b[0;36mQueuePool._do_get\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    175\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_inc_overflow():\n\u001b[1;32m    176\u001b[0m     \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m--> 177\u001b[0m         \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_create_connection\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    178\u001b[0m     \u001b[38;5;28;01mexcept\u001b[39;00m:\n\u001b[1;32m    179\u001b[0m         \u001b[38;5;28;01mwith\u001b[39;00m util\u001b[38;5;241m.\u001b[39msafe_reraise():\n",
      "File \u001b[0;32m~/misis/itam/messenger_proj_beckend/itam_messenger_env/lib/python3.12/site-packages/sqlalchemy/pool/base.py:390\u001b[0m, in \u001b[0;36mPool._create_connection\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    387\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m_create_connection\u001b[39m(\u001b[38;5;28mself\u001b[39m) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m ConnectionPoolEntry:\n\u001b[1;32m    388\u001b[0m \u001b[38;5;250m    \u001b[39m\u001b[38;5;124;03m\"\"\"Called by subclasses to create a new ConnectionRecord.\"\"\"\u001b[39;00m\n\u001b[0;32m--> 390\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43m_ConnectionRecord\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m)\u001b[49m\n",
      "File \u001b[0;32m~/misis/itam/messenger_proj_beckend/itam_messenger_env/lib/python3.12/site-packages/sqlalchemy/pool/base.py:674\u001b[0m, in \u001b[0;36m_ConnectionRecord.__init__\u001b[0;34m(self, pool, connect)\u001b[0m\n\u001b[1;32m    672\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m__pool \u001b[38;5;241m=\u001b[39m pool\n\u001b[1;32m    673\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m connect:\n\u001b[0;32m--> 674\u001b[0m     \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m__connect\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    675\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mfinalize_callback \u001b[38;5;241m=\u001b[39m deque()\n",
      "File \u001b[0;32m~/misis/itam/messenger_proj_beckend/itam_messenger_env/lib/python3.12/site-packages/sqlalchemy/pool/base.py:900\u001b[0m, in \u001b[0;36m_ConnectionRecord.__connect\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    898\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mfresh \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mTrue\u001b[39;00m\n\u001b[1;32m    899\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mBaseException\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m e:\n\u001b[0;32m--> 900\u001b[0m \u001b[43m    \u001b[49m\u001b[38;5;28;43;01mwith\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[43mutil\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43msafe_reraise\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\u001b[43m:\u001b[49m\n\u001b[1;32m    901\u001b[0m \u001b[43m        \u001b[49m\u001b[43mpool\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mlogger\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mdebug\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mError on connect(): \u001b[39;49m\u001b[38;5;132;43;01m%s\u001b[39;49;00m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43me\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    902\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m    903\u001b[0m     \u001b[38;5;66;03m# in SQLAlchemy 1.4 the first_connect event is not used by\u001b[39;00m\n\u001b[1;32m    904\u001b[0m     \u001b[38;5;66;03m# the engine, so this will usually not be set\u001b[39;00m\n",
      "File \u001b[0;32m~/misis/itam/messenger_proj_beckend/itam_messenger_env/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:146\u001b[0m, in \u001b[0;36msafe_reraise.__exit__\u001b[0;34m(self, type_, value, traceback)\u001b[0m\n\u001b[1;32m    144\u001b[0m     \u001b[38;5;28;01massert\u001b[39;00m exc_value \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m\n\u001b[1;32m    145\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_exc_info \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m  \u001b[38;5;66;03m# remove potential circular references\u001b[39;00m\n\u001b[0;32m--> 146\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m exc_value\u001b[38;5;241m.\u001b[39mwith_traceback(exc_tb)\n\u001b[1;32m    147\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m    148\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_exc_info \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m  \u001b[38;5;66;03m# remove potential circular references\u001b[39;00m\n",
      "File \u001b[0;32m~/misis/itam/messenger_proj_beckend/itam_messenger_env/lib/python3.12/site-packages/sqlalchemy/pool/base.py:896\u001b[0m, in \u001b[0;36m_ConnectionRecord.__connect\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    894\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[1;32m    895\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mstarttime \u001b[38;5;241m=\u001b[39m time\u001b[38;5;241m.\u001b[39mtime()\n\u001b[0;32m--> 896\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mdbapi_connection \u001b[38;5;241m=\u001b[39m connection \u001b[38;5;241m=\u001b[39m \u001b[43mpool\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_invoke_creator\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m)\u001b[49m\n\u001b[1;32m    897\u001b[0m     pool\u001b[38;5;241m.\u001b[39mlogger\u001b[38;5;241m.\u001b[39mdebug(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mCreated new connection \u001b[39m\u001b[38;5;132;01m%r\u001b[39;00m\u001b[38;5;124m\"\u001b[39m, connection)\n\u001b[1;32m    898\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mfresh \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mTrue\u001b[39;00m\n",
      "File \u001b[0;32m~/misis/itam/messenger_proj_beckend/itam_messenger_env/lib/python3.12/site-packages/sqlalchemy/engine/create.py:643\u001b[0m, in \u001b[0;36mcreate_engine.<locals>.connect\u001b[0;34m(connection_record)\u001b[0m\n\u001b[1;32m    640\u001b[0m         \u001b[38;5;28;01mif\u001b[39;00m connection \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m    641\u001b[0m             \u001b[38;5;28;01mreturn\u001b[39;00m connection\n\u001b[0;32m--> 643\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mdialect\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mconnect\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mcargs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mcparams\u001b[49m\u001b[43m)\u001b[49m\n",
      "File \u001b[0;32m~/misis/itam/messenger_proj_beckend/itam_messenger_env/lib/python3.12/site-packages/sqlalchemy/engine/default.py:621\u001b[0m, in \u001b[0;36mDefaultDialect.connect\u001b[0;34m(self, *cargs, **cparams)\u001b[0m\n\u001b[1;32m    619\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mconnect\u001b[39m(\u001b[38;5;28mself\u001b[39m, \u001b[38;5;241m*\u001b[39mcargs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mcparams):\n\u001b[1;32m    620\u001b[0m     \u001b[38;5;66;03m# inherits the docstring from interfaces.Dialect.connect\u001b[39;00m\n\u001b[0;32m--> 621\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mloaded_dbapi\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mconnect\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mcargs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mcparams\u001b[49m\u001b[43m)\u001b[49m\n",
      "File \u001b[0;32m~/misis/itam/messenger_proj_beckend/itam_messenger_env/lib/python3.12/site-packages/sqlalchemy/dialects/postgresql/asyncpg.py:949\u001b[0m, in \u001b[0;36mAsyncAdapt_asyncpg_dbapi.connect\u001b[0;34m(self, *arg, **kw)\u001b[0m\n\u001b[1;32m    940\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m AsyncAdaptFallback_asyncpg_connection(\n\u001b[1;32m    941\u001b[0m         \u001b[38;5;28mself\u001b[39m,\n\u001b[1;32m    942\u001b[0m         await_fallback(creator_fn(\u001b[38;5;241m*\u001b[39marg, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkw)),\n\u001b[1;32m    943\u001b[0m         prepared_statement_cache_size\u001b[38;5;241m=\u001b[39mprepared_statement_cache_size,\n\u001b[1;32m    944\u001b[0m         prepared_statement_name_func\u001b[38;5;241m=\u001b[39mprepared_statement_name_func,\n\u001b[1;32m    945\u001b[0m     )\n\u001b[1;32m    946\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m    947\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m AsyncAdapt_asyncpg_connection(\n\u001b[1;32m    948\u001b[0m         \u001b[38;5;28mself\u001b[39m,\n\u001b[0;32m--> 949\u001b[0m         \u001b[43mawait_only\u001b[49m\u001b[43m(\u001b[49m\u001b[43mcreator_fn\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43marg\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkw\u001b[49m\u001b[43m)\u001b[49m\u001b[43m)\u001b[49m,\n\u001b[1;32m    950\u001b[0m         prepared_statement_cache_size\u001b[38;5;241m=\u001b[39mprepared_statement_cache_size,\n\u001b[1;32m    951\u001b[0m         prepared_statement_name_func\u001b[38;5;241m=\u001b[39mprepared_statement_name_func,\n\u001b[1;32m    952\u001b[0m     )\n",
      "File \u001b[0;32m~/misis/itam/messenger_proj_beckend/itam_messenger_env/lib/python3.12/site-packages/sqlalchemy/util/_concurrency_py3k.py:123\u001b[0m, in \u001b[0;36mawait_only\u001b[0;34m(awaitable)\u001b[0m\n\u001b[1;32m    120\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28mgetattr\u001b[39m(current, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m__sqlalchemy_greenlet_provider__\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;28;01mFalse\u001b[39;00m):\n\u001b[1;32m    121\u001b[0m     _safe_cancel_awaitable(awaitable)\n\u001b[0;32m--> 123\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m exc\u001b[38;5;241m.\u001b[39mMissingGreenlet(\n\u001b[1;32m    124\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mgreenlet_spawn has not been called; can\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mt call await_only() \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    125\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mhere. Was IO attempted in an unexpected place?\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    126\u001b[0m     )\n\u001b[1;32m    128\u001b[0m \u001b[38;5;66;03m# returns the control to the driver greenlet passing it\u001b[39;00m\n\u001b[1;32m    129\u001b[0m \u001b[38;5;66;03m# a coroutine to run. Once the awaitable is done, the driver greenlet\u001b[39;00m\n\u001b[1;32m    130\u001b[0m \u001b[38;5;66;03m# switches back to this greenlet with the result of awaitable that is\u001b[39;00m\n\u001b[1;32m    131\u001b[0m \u001b[38;5;66;03m# then returned to the caller (or raised as error)\u001b[39;00m\n\u001b[1;32m    132\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m current\u001b[38;5;241m.\u001b[39mparent\u001b[38;5;241m.\u001b[39mswitch(awaitable)\n",
      "\u001b[0;31mMissingGreenlet\u001b[0m: greenlet_spawn has not been called; can't call await_only() here. Was IO attempted in an unexpected place? (Background on this error at: https://sqlalche.me/e/20/xd2s)"
     ]
    }
   ],
   "source": [
    "from sqlalchemy import Text, ForeignKey, DateTime, BigInteger, Column\n",
    "from sqlalchemy.orm import relationship\n",
    "from sqlalchemy.orm import declarative_base\n",
    "\n",
    "DB_HOST = \"localhost\"\n",
    "DB_PORT = \"5432\"\n",
    "DB_NAME = \"postgres\"\n",
    "DB_USER =\"postgres\"\n",
    "DB_PASSWORD = \"postgres\"\n",
    "\n",
    "DATABASE_URL=f\"postgresql+asyncpg://{DB_USER}:{DB_PASSWORD}@{DB_HOST}:{DB_PORT}/{DB_NAME}\"\n",
    "\n",
    "Base = declarative_base()\n",
    "engine = create_engine(url=DATABASE_URL)\n",
    "\n",
    "async with engine.connect() as conection:\n",
    "    print(conection)\n",
    "\n",
    "class User(Base):\n",
    "    __tablename__ = \"user\"\n",
    "    id = Column(BigInteger, primary_key=True, nullable=False, autoincrement=True)\n",
    "    username = Column(Text, nullable=False)\n",
    "    short_username = Column(Text)\n",
    "    status = Column(Text)\n",
    "    photo = Column(Text) #text_link\n",
    "    password = Column(Text, nullable=False) #text_hashasync with engine.connect() as conection:\n",
    "    print(conection)\n",
    "    created_at = Column(DateTime, nullable=False)\n",
    "\n",
    "class Message(Base):\n",
    "    __tablename__ = \"message\"\n",
    "    id = Column(BigInteger, primary_key=True, nullable=False, autoincrement=True)\n",
    "    chat_id = Column(BigInteger, ForeignKey(\"chat.id\"), nullable=False)\n",
    "    user_id = Column(BigInteger, ForeignKey(\"user.id\"), nullable=False)\n",
    "    created_at = Column(DateTime, nullable=False)\n",
    "\n",
    "class Chat(Base):\n",
    "    __tablename__ = \"chat\"\n",
    "    id = Column(BigInteger, primary_key=True, nullable=False, autoincrement=True)\n",
    "    chat_name = Column(Text)\n",
    "    photo = Column(Text) # photo link\n",
    "    created_at = Column(DateTime, nullable=False)\n",
    "\n",
    "\n",
    "class Member(Base):\n",
    "    __tablename__ = \"member\"\n",
    "    id = Column(BigInteger, autoincrement=True, primary_key=True, nullable=False)\n",
    "    chat_id = Column(BigInteger, ForeignKey(\"chat.id\"), nullable=False)\n",
    "    user_id = Column(BigInteger, ForeignKey(\"user.id\"), nullable=False)\n",
    "    added_at = Column(DateTime, nullable=False)\n",
    "    role = Column(Text) # owner, admin, plain\n",
    "\n",
    "Base.metadata.create_all(engine)\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sqlalchemy import Text, ForeignKey, DateTime, BigInteger, Column\n",
    "from sqlalchemy.orm import relationship\n",
    "from sqlalchemy.orm import declarative_base"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Подключение к базе данных успешно!\n",
      "None\n",
      "Подключение к базе данных успешно!\n",
      "None\n"
     ]
    }
   ],
   "source": [
    "DB_HOST = \"127.0.0.1\"\n",
    "DB_PORT = \"5432\"\n",
    "DB_NAME = \"budget_lists\"\n",
    "DB_USER =\"postgres\"\n",
    "DB_PASSWORD = \"postgres\"\n",
    "DATABASE_URL_ASYNC=f\"postgresql+asyncpg://{DB_USER}:{DB_PASSWORD}@{DB_HOST}:{DB_PORT}/{DB_NAME}\"\n",
    "DATABASE_URL_SYNC=f\"postgresql+psycopg2://{DB_USER}:{DB_PASSWORD}@{DB_HOST}:{DB_PORT}/{DB_NAME}\"\n",
    "\n",
    "Base = declarative_base()\n",
    "\n",
    "engine = create_async_engine(url=DATABASE_URL_ASYNC)\n",
    "try:\n",
    "    async with engine.connect() as connection:\n",
    "        result = await connection.execute(text(\"SELECT * FROM meow\"))\n",
    "        print(\"Подключение к базе данных успешно!\")\n",
    "        print(result.fetchone())\n",
    "except Exception as e:\n",
    "    print(\"Ошибка подключения к базе данных:\")\n",
    "    print(e)\n",
    "\n",
    "engine = create_engine(url=DATABASE_URL_SYNC)\n",
    "try:\n",
    "    with engine.connect() as connection:\n",
    "        result = connection.execute(text(\"SELECT * FROM meow\"))\n",
    "        print(\"Подключение к базе данных успешно!\")\n",
    "        print(result.fetchone())\n",
    "except Exception as e:\n",
    "    print(\"Ошибка подключения к базе данных:\")\n",
    "    print(e)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "### s3 selectel api\n",
    "import asyncio"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "from aiobotocore.session import get_session\n",
    "from contextlib import asynccontextmanager\n",
    "import uuid\n",
    "\n",
    "class S3Client:\n",
    "    def __init__(\n",
    "        self,\n",
    "        access_key: str,\n",
    "        secret_key: str,\n",
    "        endpoint_url: str,\n",
    "        bucket_name:str \n",
    "    ):\n",
    "        self.config = {\n",
    "            \"aws_access_key_id\": access_key,\n",
    "            \"aws_secret_access_key\": secret_key,\n",
    "            \"endpoint_url\": endpoint_url\n",
    "        }\n",
    "        self.bucket_name = bucket_name\n",
    "        self.session = get_session()\n",
    "\n",
    "    @asynccontextmanager\n",
    "    async def get_client(self):\n",
    "        async with self.session.create_client(\"s3\", **self.config) as client:\n",
    "            yield client\n",
    "\n",
    "    async def upload_file(\n",
    "        self, \n",
    "        file_path: str,\n",
    "        object_name: str=\"a\",\n",
    "        user_id: str=1\n",
    "\n",
    "    ):\n",
    "        object_name = file_path.split(\"/\")[-1] #+ str(uuid.uuid4()) + str(user_id)\n",
    "        async with self.get_client() as client:\n",
    "            with open(file_path, \"rb\") as file:\n",
    "                await client.put_object(\n",
    "                    Bucket=self.bucket_name,\n",
    "                    Key=object_name,\n",
    "                    Body=file\n",
    "                )\n",
    "\n",
    "    async def get_file(self, object_name: str, destination_path: str):\n",
    "        \"\"\"Позволяет получить файл.\"\"\"\n",
    "        try:\n",
    "            async with self.get_client() as client:\n",
    "                response = await client.get_object(\n",
    "                    Bucket=self.bucket_name, Key=object_name\n",
    "                )\n",
    "                data = await response['Body'].read()\n",
    "                with open(destination_path, 'wb') as file:\n",
    "                    file.write(data)\n",
    "                print(f'File {object_name} has been downloaded'\n",
    "                      f'to {destination_path}')\n",
    "        except ClientError as error:\n",
    "            print(f'Error while downloading file: {error}')\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "async def main():\n",
    "    s3_client = S3Client(\n",
    "        access_key=\"55e1ffce5ecf4210b6717ceb9cabbf87\",\n",
    "        secret_key=\"bb08bfb363bb41af9463aed33e2693a6\",\n",
    "        endpoint_url=\"https://s3.ru-1.storage.selcloud.ru\",\n",
    "        bucket_name=\"afina-storage\"\n",
    "    )\n",
    "    \n",
    "    await s3_client.upload_file(\"debug.ipynb\")\n",
    "    await s3_client.get_file(\"debug.ipynb\", \"text_local_file.txt\")\n",
    "    \n",
    "\n",
    "await main()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "ename": "AttributeError",
     "evalue": "'S3Client' object has no attribute 'get_file'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "Cell \u001b[0;32mIn[21], line 54\u001b[0m\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\u001b[1;32m     50\u001b[0m     \u001b[38;5;28;01mawait\u001b[39;00m s3_client\u001b[38;5;241m.\u001b[39mupload_file(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mdebug.ipynb\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\u001b[1;32m     51\u001b[0m     \u001b[38;5;28;01mawait\u001b[39;00m s3_client\u001b[38;5;241m.\u001b[39mget_file(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mdebug.ipynb\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mtext_local_file.txt\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\u001b[0;32m---> 54\u001b[0m \u001b[38;5;28;01mawait\u001b[39;00m main()\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "Cell \u001b[0;32mIn[21], line 51\u001b[0m, in \u001b[0;36mmain\u001b[0;34m()\u001b[0m\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\u001b[1;32m     43\u001b[0m s3_client \u001b[38;5;241m=\u001b[39m S3Client(\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\u001b[1;32m     44\u001b[0m     access_key\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m55e1ffce5ecf4210b6717ceb9cabbf87\u001b[39m\u001b[38;5;124m\"\u001b[39m,\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\u001b[1;32m     45\u001b[0m     secret_key\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mbb08bfb363bb41af9463aed33e2693a6\u001b[39m\u001b[38;5;124m\"\u001b[39m,\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\u001b[1;32m     46\u001b[0m     endpoint_url\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mhttps://s3.ru-1.storage.selcloud.ru\u001b[39m\u001b[38;5;124m\"\u001b[39m,\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\u001b[1;32m     47\u001b[0m     bucket_name\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mafina-storage\u001b[39m\u001b[38;5;124m\"\u001b[39m\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\u001b[1;32m     48\u001b[0m )\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\u001b[1;32m     50\u001b[0m \u001b[38;5;28;01mawait\u001b[39;00m s3_client\u001b[38;5;241m.\u001b[39mupload_file(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mdebug.ipynb\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\u001b[0;32m---> 51\u001b[0m \u001b[38;5;28;01mawait\u001b[39;00m \u001b[43ms3_client\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mget_file\u001b[49m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mdebug.ipynb\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mtext_local_file.txt\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\u001b[0;31mAttributeError\u001b[0m: 'S3Client' object has no attribute 'get_file'"
     ]
    }
   ],
   "source": [
    "from aiobotocore.session import get_session\n",
    "from contextlib import asynccontextmanager\n",
    "import uuid\n",
    "\n",
    "class S3Client:\n",
    "    def __init__(\n",
    "        self,\n",
    "        access_key: str,\n",
    "        secret_key: str,\n",
    "        endpoint_url: str,\n",
    "        bucket_name:str \n",
    "    ):\n",
    "        self.config = {\n",
    "            \"aws_access_key_id\": access_key,\n",
    "            \"aws_secret_access_key\": secret_key,\n",
    "            \"endpoint_url\": endpoint_url\n",
    "        }\n",
    "        self.bucket_name = bucket_name\n",
    "        self.session = get_session()\n",
    "\n",
    "    @asynccontextmanager\n",
    "    async def get_client(self):\n",
    "        async with self.session.create_client(\"s3\", **self.config) as client:\n",
    "            yield client\n",
    "\n",
    "    async def upload_file(\n",
    "        self, \n",
    "        file_path: str,\n",
    "        object_name: str=\"a\",\n",
    "        user_id: str=1\n",
    "\n",
    "    ):\n",
    "        object_name = file_path.split(\"/\")[-1] #+ str(uuid.uuid4()) + str(user_id)\n",
    "        async with self.get_client() as client:\n",
    "            with open(file_path, \"rb\") as file:\n",
    "                await client.put_object(\n",
    "                    Bucket=self.bucket_name,\n",
    "                    Key=object_name,\n",
    "                    Body=file\n",
    "                )\n",
    "\n",
    "async def main():\n",
    "    s3_client = S3Client(\n",
    "        access_key=\"55e1ffce5ecf4210b6717ceb9cabbf87\",\n",
    "        secret_key=\"bb08bfb363bb41af9463aed33e2693a6\",\n",
    "        endpoint_url=\"https://s3.ru-1.storage.selcloud.ru\",\n",
    "        bucket_name=\"afina-storage\"\n",
    "    )\n",
    "    \n",
    "    await s3_client.upload_file(\"debug.ipynb\")\n",
    "    await s3_client.get_file(\"debug.ipynb\", \"text_local_file.txt\")\n",
    "    \n",
    "\n",
    "await main()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "async def main():\n",
    "    s3_client = S3Client(\n",
    "        access_key=\"55e1ffce5ecf4210b6717ceb9cabbf87\",\n",
    "        secret_key=\"bb08bfb363bb41af9463aed33e2693a6\",\n",
    "        endpoint_url=\"https://s3.ru-1.storage.selcloud.ru\",\n",
    "        bucket_name=\"afina-storage\"\n",
    "    )\n",
    "    \n",
    "    await s3_client.upload_file(\"debug.ipynb\")\n",
    "    await s3_client.get_file(\"debug.ipynb\", \"text_local_file.txt\")\n",
    "    \n",
    "\n",
    "await main()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "debug.ipynb\t    main.py\tpresentation\t  services\n",
      "infrastructure\t    persistent\trepository\t  settings\n",
      "itam_messenger_env  pg_db\trequirements.txt\n"
     ]
    }
   ],
   "source": [
    "! ls"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "debug.ipynb\t    main.py\tpresentation\t  services\n",
      "infrastructure\t    persistent\trepository\t  settings\n",
      "itam_messenger_env  pg_db\trequirements.txt\n"
     ]
    }
   ],
   "source": [
    "! ls"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "itam_messenger_env",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
